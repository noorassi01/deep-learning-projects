# -*- coding: utf-8 -*-
"""lab4 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RCQs_Xsn9jOfynidyWO9ascxj68URuDY

<a href="https://colab.research.google.com/github/wingated/cs474_labs_f2019/blob/master/DL_Lab4.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# Lab 4: Cancer Detection

## Objective
* To build a dense prediction model
* To begin reading current papers in DNN research

## Deliverable
For this lab, you will turn in a notebook that describes your efforts at creating
a pytorch radiologist. Your final deliverable is a notebook that has (1) a deep network,
(2) method of calculating accuracy,
(3) images that show the dense prediction produced by your network on the pos_test_000072.png image (index 172 in the validation dataset).
This is an image in the test set that your network will not have seen before.
This image, and the ground truth labeling, is shown below.
(And is contained in the downloadable dataset below).

![](http://liftothers.org/dokuwiki/lib/exe/fetch.php?w=200&tok=a8ac31&media=cs501r_f2016:pos_test_000072_output.png)
<img src="http://liftothers.org/dokuwiki/lib/exe/fetch.php?media=cs501r_f2016:pos_test_000072.png" width="200">


## Grading standards
Your notebook will be graded on the following:
* 40% Proper design, creation and debugging of a dense prediction network
* 20% Proper implementation of train/test set accuracy measure
* 20% Tidy visualizations of loss of your dense predictor during training
* 20% Test image output


## Data set
The data is given as a set of 1024×1024 PNG images. Each input image (in
the ```inputs``` directory) is an RGB image of a section of tissue,
and there a file with the same name (in the ```outputs``` directory)
that has a dense labeling of whether or not a section of tissue is cancerous
(white pixels mean “cancerous”, while black pixels mean “not cancerous”).

The data has been pre-split for you into test and training splits.
Filenames also reflect whether or not the image has any cancer at all
(files starting with ```pos_``` have some cancerous pixels, while files
starting with ```neg_``` have no cancer anywhere).
All of the data is hand-labeled, so the dataset is not very large.
That means that overfitting is a real possibility.

## Description
For a video including some tips and tricks that can help with this lab: [https://youtu.be/Ms19kgK_D8w](https://youtu.be/Ms19kgK_D8w)
For this lab, you will implement a virtual radiologist.
You are given images of possibly cancerous tissue samples,
and you must build a detector that identifies where in the tissue cancer may reside.

---

### Part 0
Watch and follow video tutorial:

https://youtu.be/Ms19kgK_D8w

**TODO:**

* Watch tutorial

**DONE:**

### Part 1
Implement a dense predictor

In previous labs and lectures, we have talked about DNNs that classify an
entire image as a single class. Here, however, we are interested in a more nuanced classification:
given an input image, we would like to identify each pixel that is possibly cancerous.
That means that instead of a single output, your network should output an “image”,
where each output pixel of your network represents the probability that a pixel is cancerous.

___

Implement your network topology

Use the “Deep Convolution U-Net” from this paper: [(U-Net: Convolutional Networks for Biomedical Image Segmentation)](https://arxiv.org/pdf/1505.04597.pdf)

![(Figure 1)](https://lh3.googleusercontent.com/qnHiB3B2KRxC3NjiSDtY08_DgDGTDsHcO6PP53oNRuct-p2QXCR-gyLkDveO850F2tTAhIOPC5Ha06NP9xq1JPsVAHlQ5UXA5V-9zkUrJHGhP_MNHFoRGnjBz1vn1p8P2rMWhlAb6HQ=w2400)

You should use existing pytorch functions (not your own Conv2D module), such as ```nn.Conv2d``` and ```nn.CrossEntropyLoss```;
you will also need the pytorch function ```torch.cat``` and ```nn.ConvTranspose2d```

```torch.cat``` allows you to concatenate tensors.
```nn.ConvTranspose2d``` is the opposite of ```nn.Conv2d```.
It is used to bring an image from low res to higher res.
[This blog](https://towardsdatascience.com/up-sampling-with-transposed-convolution-9ae4f2df52d0) should help you understand this function in detail.

You can simplify the implementation of this lab by padding the feature maps as they pass through each convolution. This will make the concatenation process easier, though this is technically a departure from the cropping technique outlined in the orginal U-Net paper.

Note that the simplest network you could implement (with all the desired properties)
is just a single convolution layer with two filters and no relu!
Why is that? (of course it wouldn't work very well!)

**TODO:**

* Understand the U-Net architecture
* Understand concatenation of inputs from multiple prior layers
* Understand ConvTranspose
* Answer Question / Reflect on simplest network with the desired properties

**DONE:**


___
The intention of this lab is to learn how to make deep neural nets. We'll help you with the implementation of Dataset.
This code will download the dataset for you so that you are ready to use it and focus on network
implementation, losses and accuracies.
"""

!pip3 install torch
!pip3 install torchvision
!pip3 install tqdm

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import numpy as np
import matplotlib.pyplot as plt
from torchvision import transforms, utils, datasets
from tqdm import tqdm
from torch.nn.parameter import Parameter
import pdb
import torchvision
import os
import gzip
import tarfile
import gc
import time
from IPython.core.ultratb import AutoFormattedTB
__ITB__ = AutoFormattedTB(mode = 'Verbose',color_scheme='LightBg', tb_offset = 1)

assert torch.cuda.is_available(), "You need to request a GPU from Runtime > Change Runtime"

"""WARNING: You may run into an error that says "RuntimeError: CUDA out of memory."

In this case, the memory required for your batch is larger than what the GPU is capable of. You can solve this problem by adjusting the image size or the batch size and then restarting the runtime.
"""

class CancerDataset(Dataset):
  def __init__(self, root, download=True, size=512, train=True):
    if download and not os.path.exists(os.path.join(root, 'cancer_data')):
      datasets.utils.download_url('http://liftothers.org/cancer_data.tar.gz', root, 'cancer_data.tar.gz', None)
      self.extract_gzip(os.path.join(root, 'cancer_data.tar.gz'))
      self.extract_tar(os.path.join(root, 'cancer_data.tar'))

    postfix = 'train' if train else 'test'
    root = os.path.join(root, 'cancer_data', 'cancer_data')
    self.dataset_folder = torchvision.datasets.ImageFolder(os.path.join(root, 'inputs_' + postfix) ,transform = transforms.Compose([transforms.Resize(size),transforms.ToTensor()]))
    self.label_folder = torchvision.datasets.ImageFolder(os.path.join(root, 'outputs_' + postfix) ,transform = transforms.Compose([transforms.Resize(size),transforms.ToTensor()]))

  @staticmethod
  def extract_gzip(gzip_path, remove_finished=False):
    print('Extracting {}'.format(gzip_path))
    with open(gzip_path.replace('.gz', ''), 'wb') as out_f, gzip.GzipFile(gzip_path) as zip_f:
      out_f.write(zip_f.read())
    if remove_finished:
      os.unlink(gzip_path)

  @staticmethod
  def extract_tar(tar_path):
    print('Untarring {}'.format(tar_path))
    z = tarfile.TarFile(tar_path)
    z.extractall(tar_path.replace('.tar', ''))

  def __getitem__(self,index):
    img = self.dataset_folder[index]
    label = self.label_folder[index]
    return img[0],label[0][0]

  def __len__(self):
    return len(self.dataset_folder)

# You'll probably want a function or something to test input / output sizes of the ConvTranspose2d layer
def testConvTranspose2dSizes():
  x_test = torch.zeros(1,3,512,512)

  up = nn.ConvTranspose2d(3, 64, (2,2), padding=0, stride=2)
  up_test = up(x_test)
  print('upSampling: \n',up_test.size())

testConvTranspose2dSizes()

def testConvTranspose2dSize(input_size, kernel_size, stride, padding, output_pad = 0):
  x_test = torch.zeros(1, 3, input_size, input_size)
  up = nn.ConvTranspose2d(3, 64, kernel_size, padding=padding, stride=stride, output_padding=output_pad)
  up_test = up(x_test)
  output_size = (input_size - 1) * stride - 2 * padding + kernel_size + output_pad
  print(up_test.size())
  print("Output Size is: ", output_size)
  assert up_test.size(2) == output_size

print(testConvTranspose2dSize(512, 2, 2, 0))

# Since you will be using the output of one network in two places(convolution and maxpooling),
# you can't use nn.Sequential.
# Instead you will write up the network like normal variable assignment as the example shown below:
# You are welcome (and encouraged) to use the built-in batch normalization and dropout layer.

# TODO: You need to change this to fit the UNet structure!!!


class CancerDetection(nn.Module):
  def __init__(self, dataset):
    super(CancerDetection, self).__init__()
    # self.conv1 = nn.Conv2d(3,64,kernel_size = 3, stride = 1, padding = 1)
    # self.relu2 = nn.ReLU()
    # self.conv3 = nn.Conv2d(64,128,kernel_size = 3, stride = 1, padding = 1)
    # self.relu4 = nn.ReLU()
    x, y = dataset[0]
    c, h, w = x.size()


    # Encoder
    self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding = 1, stride=1)
    self.relu1 = nn.ReLU()
    self.conv11 = nn.Conv2d(64, 64, kernel_size=3, padding = 1, stride=1)
    self.relu11 = nn.ReLU()
    self.conv1_bn = nn.BatchNorm2d(64)

    self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding = 1, stride=1)
    self.relu2 = nn.ReLU()
    self.conv22 = nn.Conv2d(128, 128, kernel_size=3, padding = 1, stride=1)
    self.relu22 = nn.ReLU()
    self.conv2_bn = nn.BatchNorm2d(128)

    self.conv3 = nn.Conv2d(128, 256, kernel_size=3, padding = 1, stride=1)
    self.relu3 = nn.ReLU()
    self.conv33 = nn.Conv2d(256, 256, kernel_size=3, padding = 1, stride=1)
    self.relu33 = nn.ReLU()
    self.conv3_bn = nn.BatchNorm2d(256)

    self.conv4 = nn.Conv2d(256, 512, kernel_size=3, padding = 1, stride=1)
    self.relu4 = nn.ReLU()
    self.conv44 = nn.Conv2d(512, 512, kernel_size=3, padding = 1, stride=1)
    self.relu44 = nn.ReLU()
    self.conv4_bn = nn.BatchNorm2d(512)

    # BottleNeck
    self.conv5 = nn.Conv2d(512, 1024, kernel_size=3, padding = 1, stride=1)
    self.relu5 = nn.ReLU()
    self.conv55 = nn.Conv2d(1024, 1024, kernel_size=3, padding = 1, stride=1)
    self.relu55 = nn.ReLU()
    self.conv5_bn = nn.BatchNorm2d(1024)

    # Decoder
    self.convT1 = nn.ConvTranspose2d(1024, 512, kernel_size=4, padding=1, stride=2)
    self.relu6 = nn.ReLU()
    self.convd1 = nn.Conv2d(1024, 512, kernel_size=3, padding = 1, stride=1)
    self.relud1 = nn.ReLU()
    self.convd2 = nn.Conv2d(512, 512, kernel_size=3, padding = 1, stride=1)
    self.relud2 = nn.ReLU()
    self.convT1_bn = nn.BatchNorm2d(512)

    self.convT2 = nn.ConvTranspose2d(512, 256, kernel_size=4, padding=1, stride=2)
    self.relu7 = nn.ReLU()
    self.convd3 = nn.Conv2d(512, 256, kernel_size=3, padding = 1, stride=1)
    self.relud3 = nn.ReLU()
    self.convd4 = nn.Conv2d(256, 256, kernel_size=3, padding = 1, stride=1)
    self.relud4 = nn.ReLU()
    self.convT2_bn = nn.BatchNorm2d(256)

    self.convT3 = nn.ConvTranspose2d(256, 128, kernel_size=4, padding=1, stride=2)
    self.relu8 = nn.ReLU()
    self.convd5 = nn.Conv2d(256, 128, kernel_size=3, padding = 1, stride=1)
    self.relud5 = nn.ReLU()
    self.convd6 = nn.Conv2d(128, 128, kernel_size=3, padding = 1, stride=1)
    self.relud6 = nn.ReLU()
    self.convT3_bn = nn.BatchNorm2d(128)

    self.convT4 = nn.ConvTranspose2d(128, 64, kernel_size=4, padding=1, stride=2)
    self.relu9 = nn.ReLU()
    self.convd7 = nn.Conv2d(128, 64, kernel_size=3, padding = 1, stride=1)
    self.relud7 = nn.ReLU()
    self.convd8 = nn.Conv2d(64, 64, kernel_size=3, padding = 1, stride=1)
    self.relud8 = nn.ReLU()
    self.convT4_bn = nn.BatchNorm2d(64)

    # Output layer
    self.final_conv = nn.Conv2d(64, 2, kernel_size=1, padding=0)

    self.dropout = nn.Dropout(0.5)

    self.maxpool = nn.MaxPool2d((2,2), stride=2)



  def forward(self, input):
    # conv1_out = self.conv1(input)
    # relu2_out = self.relu2(conv1_out)
    # conv3_out = self.conv3(relu2_out)
    # relu4_out = self.relu4(conv3_out)

    enc1 = self.relu11(self.conv11(self.relu1(self.conv1_bn(self.conv1(input)))))
    enc1_pooled = self.maxpool(enc1)

    enc2 = self.relu22(self.conv22(self.relu2(self.conv2_bn(self.conv2(enc1_pooled)))))
    enc2_pooled = self.maxpool(enc2)

    enc3 = self.relu33(self.conv33(self.relu3(self.conv3_bn(self.conv3(enc2_pooled)))))
    enc3_pooled = self.maxpool(enc3)

    enc4 = self.relu44(self.conv44(self.relu4(self.conv4_bn(self.conv4(enc3_pooled)))))
    enc4_pooled = self.maxpool(enc4)

    # Bottleneck
    b_n = self.relu55(self.conv55(self.relu5(self.conv5_bn(self.conv5(enc4_pooled)))))

    # Decoder
    dec1 = self.relu6(self.convT1_bn(self.convT1(b_n)))
    dec1 = torch.cat((dec1, enc4), dim=1)
    dec1 = self.relud2(self.convd2(self.relud1(self.convd1(dec1))))

    dec2 = self.relu7(self.convT2_bn(self.convT2(dec1)))
    dec2 = torch.cat((dec2, enc3), dim=1)
    dec2 = self.relud4(self.convd4(self.relud3(self.convd3(dec2))))

    dec3 = self.relu8(self.convT3_bn(self.convT3(dec2)))
    dec3 = torch.cat((dec3, enc2), dim=1)
    dec3 = self.relud6(self.convd6(self.relud5(self.convd5(dec3))))

    dec4 = self.relu9(self.convT4_bn(self.convT4(dec3)))
    dec4 = torch.cat((dec4, enc1), dim=1)
    dec4 = self.relud8(self.convd8(self.relud7(self.convd7(dec4))))

    # Output layer
    final = self.final_conv(dec4)

    return final.squeeze(2).squeeze(2)

# Create your datasets, dataloaders and neural network as you have before
# Tip: Pass shuffle=True to constructor for training dataloader

# This is what was talked about in the video for memory management

num_epochs = 5
losses = []
validations = []
accuracies = []
val_scores = []
pictures_to_plot = []

def scope():
  try:
    #your code for calling dataset and dataloader
    train_dataset = CancerDataset('/tmp/cancerdata', train=True)
    val_dataset = CancerDataset('/tmp/cancerdata', train=False)

    train_loader = DataLoader(train_dataset, batch_size=7, pin_memory= True, shuffle=True)
    val_loader = DataLoader(val_dataset, batch_size=7, pin_memory=True, shuffle=True)


    model = CancerDetection(train_dataset)

    model = model.cuda()

    objective = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=1e-4)
    gc.collect()
    print(torch.cuda.memory_allocated() / 1e9)

    #for epochs:
    # Call your model, figure out loss and accuracy

    for epoch in range(num_epochs):

      loop = tqdm(total=len(train_loader), position=0, leave=False)


      for batch, (x, y_truth) in enumerate(train_loader):
        x, y_truth = x.cuda(non_blocking=True), y_truth.cuda(non_blocking=True)

        optimizer.zero_grad()
        y_hat= model(x)


        y_hat = y_hat.float()
        y_truth = y_truth.long()


        loss= objective(y_hat, y_truth)

        loss.backward()

        losses.append(loss.item())

        # guesses = torch.softmax(y_hat, dim=1).argmax(dim=1)

        accuracy = (y_hat.argmax(1) == y_truth).float().mean()
        accuracies.append(accuracy.item())
        loop.set_description('epoch:{} loss:{:.4f} accuracy:{:.3f}'.format(epoch, loss.item(), accuracy))
        loop.update(1)

        del y_hat, x, y_truth

        optimizer.step()

        if batch % 100 == 0:
          val_acc_list = []
          for inc, (x_val, y_val) in enumerate(val_loader):
            x_val, y_val = x_val.cuda(non_blocking=True), y_val.cuda(non_blocking=True)
            y_val_hat = model(x_val)

            val = np.mean([objective(y_val_hat.float(), y_val.long()).item()])
            validations.append((len(losses), val))

            val_score = (y_val_hat.argmax(1) == y_val).float().mean()
            val_acc_list.append(val_score.item())

            del y_val_hat, x_val, y_val
            val_scores.append((len(accuracies), np.array(val_acc_list).mean()))


      # Saving pictures after every epoch
      x,truth_img = val_dataset[172]
      x = model(x.unsqueeze(0).cuda())

      img = torch.argmax(x, dim=1)
      pictures_to_plot.append(img.detach().cpu().numpy())

      loop.close()

    return model

  except:
    __ITB__()

model = scope()

"""
___

### Part 2

Plot performance over time

Please generate two plots:

 One that shows loss on the training and validation set as a function of training time.

 One that shows accuracy on the training and validation set as a function of training time.

 Make sure your axes are labeled!

**TODO:**

* Plot training/validation loss as function of training time (not epochs)
* Plot training/validation accuracy as function of training time (not epochs)

**DONE:**

"""

# Your plotting code here
a, b = zip(*validations)
plt.plot(losses, label='train')
plt.plot(a, b, label='val')
plt.title("Loss")
plt.legend()
plt.show()

a,b = zip(*val_scores)
plt.plot(accuracies, label="Train")
plt.plot(a, b, label='val')
plt.legend()
plt.title("Accuracy")
plt.show()

"""**NOTE:**

Guessing that the pixel is not cancerous every single time will give you an accuracy of ~ 85%.
Your trained network should be able to do better than that (but you will not be graded on accuracy).
This is the result I got after 1 hour or training.

![](http://liftothers.org/dokuwiki/lib/exe/fetch.php?w=400&tok=d23e0b&media=cs501r_f2016:training_accuracy.png)
![](http://liftothers.org/dokuwiki/lib/exe/fetch.php?w=400&tok=bb8e3c&media=cs501r_f2016:training_loss.png)

___

### Part 3

Generate at least 5 predictions on the pos_test_000072.png image and display them as images. These predictions should be made at a reasonable interval (e.g. every epoch).

To do this, calculate the output of your trained network on the pos_test_000072.png image,
then make a hard decision (cancerous/not-cancerous) for each pixel.
The resulting image should be black-and-white, where white pixels represent things
you think are probably cancerous.

**TODO:**

**DONE:**
"""

dataset = CancerDataset('/tmp/cancer_data', train=False)

def plot_predictions():
  x,truth_img = dataset[172]

  fig, ax = plt.subplots(1,2)
  ax[0].imshow(truth_img, cmap='gray')
  ax[0].set_title('Truth')
  ax[1].imshow(x.cpu().permute(1,2,0).numpy())
  ax[1].set_title('Picture')

  plt.show()



  for i, picture in enumerate(pictures_to_plot):
    fig2 = plt.figure()
    plt.imshow(picture[0], cmap='gray')
    plt.title('Epoch {}'.format(i+1))




plot_predictions()